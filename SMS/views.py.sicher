import pdb
import os
from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
from .models import UserProfile, Company, Claim, ClaimStatus, Team, D2_CV, D2_SV, D3
from django.contrib.auth.models import User
from .forms import Claim_New_Form, CompanyForm, UserForm, UserProfileForm, Team_Form, Data_Form, D2_CV_Form, D2_SV_Form, Claim_Form, D3_Form 
from datetime import datetime, timedelta
# from django.core.files.storage import FileSystemStorage

# Create your views here.
@login_required
def index(request):
    actual_user_id = request.user
    user_profile = UserProfile.objects.get(user_id=actual_user_id)
    if request.method == 'POST':
        user_profile.company_id = request.POST.get("vendor_choice")
    company = Company.objects.get(pk=user_profile.company_id)
    show_company = Company.objects.get(pk=user_profile.company_id).id

    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]
    return render(request, 'SMS/index.html',{'user_profile':user_profile, 'company':company, 'show_company':show_company, 'vendors':vendors, 'request':request})

@login_required
def vendor_new(request):
    actual_user_id = request.user
    user_profile = UserProfile.objects.get(user_id=actual_user_id)
    company = Company.objects.get(pk=user_profile.company_id)
    show_company = Company.objects.get(pk=user_profile.company_id).id
    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]

    if request.method == "POST":
        form = CompanyForm(request.POST)
        if form.is_valid():
            vendor = form.save(commit=False)
            vendor.save()
            return redirect('index')
    else:
        form = CompanyForm()
        return render(request, 'SMS/form.html',{'user_profile':user_profile, 'company':company, 'show_company':show_company, 'vendors':vendors,  'form': form})
#         return render(request, 'SMS/vendor_edit.html',{'user_profile':user_profile, 'company':company, 'show_company':show_company, 'vendors':vendors,  'form': form})

@login_required
def user_new(request, company_id):
    actual_user_id = request.user
    user_profile = UserProfile.objects.get(user_id=actual_user_id)
    user_profile.company_id = company_id
    company = Company.objects.get(pk=user_profile.company_id)
    show_company = company_id
    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]

    if request.method == "POST":
        form1 = UserForm(request.POST)
        form2 = UserProfileForm(request.POST)
        if form1.is_valid() and form2.is_valid():
            new_user = User.objects.create_user(**form1.cleaned_data)
            new_user_profile = form2.save(commit=False)
            user = User.objects.get(username = request.POST.get("username"))
            new_user_profile.user_id =  user.pk
            new_user_profile.company_id=show_company 
            new_user_profile.save()
            return redirect('index')
    else:
        form1 = UserForm()
        form2 = UserProfileForm()
        return render(request, 'SMS/two_forms.html',{'user_profile':user_profile, 'company':company, 'show_company':show_company, 'vendors':vendors,  'form1': form1, 'form2':form2})


@login_required
def vendor_edit(request, vendor):
    actual_user_id = request.user
    user_profile = UserProfile.objects.get(user_id=actual_user_id)
    company = Company.objects.get(pk=vendor)
    show_company = vendor
#     show_company = Company.objects.get(pk=user_profile.company_id).id
    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]

    if request.method == "POST":
        form = CompanyForm(request.POST, instance=company)
        if form.is_valid():
            company = form.save(commit = False)
            company.save()
            return redirect('index')
    else:
        form = CompanyForm(instance=company)
        return render(request, 'SMS/form.html',{'user_profile':user_profile, 'company':company, 'show_company':show_company, 'vendors':vendors,  'form': form})
#         return render(request, 'SMS/vendor_edit.html',{'user_profile':user_profile, 'company':company, 'show_company':show_company, 'vendors':vendors,  'form': form})

    
@login_required
def claims(request, company_id):
    actual_user_id = request.user
    user_profile = UserProfile.objects.get(user_id=actual_user_id)
    company = Company.objects.get(pk=company_id)
    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]
    show_company = company_id
    claims = Claim.objects.filter(related_to = company_id, valid = 'True')
     
    return render(request, 'SMS/claims.html', {'vendors':vendors, 'user_profile':user_profile, 'claims':claims, 'show_company':show_company, 'company':company,}) 
    
@login_required
def claim_edit(request, claim):
    claim = get_object_or_404(Claim, pk=claim)
    try:
        d2 = D2_CV.objects.get(claim_id=claim.pk) #vielleicht gibt es den Eintrag noch gar nicht
    except:
        d2=None
    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]
    user_profile = UserProfile.objects.get(user_id=request.user)
    company_id = claim.related_to_id
    show_company = company_id
    company = Company.objects.get(pk=company_id)

    if request.method=="POST":
        form = Claim_New_Form(request.POST, request.FILES, instance=claim)
        form2 = D2_CV_Form(request.POST, instance=d2)
        if form.is_valid() and form2.is_valid():
            claim_edit=form.save(commit=False)
            d2_edit=form2.save(commit=False)
            path= 'uploads/' + company.name + '/Claim_' + str(claim.pk)
            claim_edit.File.field.upload_to = path
            claim_edit.OK_picture.field.upload_to = path
            claim_edit.NOK_picture.field.upload_to = path
            claim_edit.save()
            d2_edit.save()
            return redirect('claims', company_id)

    else:
        form = Claim_New_Form(instance=claim)
        form2 = D2_CV_Form(instance=d2)
    return render(request, 'SMS/form_claim_base_data.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'form2': form2, 'claim':claim })
            

@login_required
def new_claim(request, company_id):
#     pdb.set_trace()
    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]
    user_profile = UserProfile.objects.get(user_id=request.user)
    show_company = company_id
    company = Company.objects.get(pk=company_id)
    no_label = True

    if request.method == "POST":
        form = Claim_New_Form(request.POST, request.FILES)
        form2 = D2_CV_Form(request.POST, request.FILES)
        if form.is_valid() and form2.is_valid():
#             pdb.set_trace()
            d2 = form2.save(commit=False)

            claim = form.save(commit=False)
#             claim.status_id = 1
            claim.status_id = ClaimStatus.objects.get(status='Opened').pk
#             Status "Opened" hartverdrahtet"
            claim.related_to_id = company_id
            claim.created_by = request.user
            claim.due_date = datetime.now()+timedelta(days=2)
            File=claim.File
            OKFile=claim.OK_picture
            NOKFile=claim.NOK_picture
 
            claim.save()
            
            if File:
                path= 'uploads/' + company.name + '/Claim_' + str(claim.pk) + '/pr' 
                oldfile=claim.File.name
                filename=os.path.basename(oldfile)
                newfile= path + filename
                claim.File.storage.delete( newfile )
                claim.File.storage.save( newfile, File )
                claim.File.name = newfile
                claim.File.close()
                claim.File.storage.delete( oldfile )
            if OKFile:
                path= 'uploads/' + company.name + '/Claim_' + str(claim.pk) + '/pr' 
                OKoldfile=claim.OK_picture.name
                OKfilename=os.path.basename(OKoldfile)
                OKnewfile=path + OKfilename 
                claim.OK_picture.storage.delete( OKnewfile )
                claim.OK_picture.storage.save( OKnewfile, OKFile )
                claim.OK_picture.name = OKnewfile
                claim.OK_picture.close()
                claim.OK_picture.storage.delete( OKoldfile )
            if NOKFile:
                path= 'uploads/' + company.name + '/Claim_' + str(claim.pk) + '/pr' 
                NOKoldfile=claim.NOK_picture.name
                NOKfilename=os.path.basename(NOKoldfile)
                NOKnewfile=path + NOKfilename 
                claim.NOK_picture.storage.delete( NOKnewfile )
                claim.NOK_picture.storage.save( NOKnewfile, NOKFile )
                claim.NOK_picture.name = NOKnewfile
                claim.NOK_picture.close()
                claim.NOK_picture.storage.delete( NOKoldfile )
            
            d2.claim_id = claim.pk
            d2.save()
            claim.save() 
            return redirect('claims', company_id)
#         else:
#             return render(request, 'SMS/form_claim_base_data.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'form2': form2, 'no_label': no_label})
        
        
    else:
        no_label = True
        form = Claim_New_Form()
        form2 = D2_CV_Form()
    return render(request, 'SMS/form_claim_base_data.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'form2': form2, 'no_label': no_label})

  
@login_required
def claim_remove(request, claim):
    claim = get_object_or_404(Claim, pk=claim)
    company_id = claim.related_to_id
    claim.valid = False
    claim.save()
    return redirect('claims', company_id)


@login_required
def D1D8(request, claim):

    try:
        team = Team.objects.get(claim_id=claim)
    except:
        team = None    
    try:
        d2_cv = D2_CV.objects.get(claim_id=claim) #vielleicht gibt es den Eintrag noch gar nicht
    except:
        d2_cv=None
    try:
        d2_sv = D2_SV.objects.get(claim_id=claim) #vielleicht gibt es den Eintrag noch gar nicht
    except:
        d2_sv=None
    try:
        d3 = D3.objects.get(claim_id=claim) #vielleicht gibt es den Eintrag noch gar nicht
#         pdb.set_trace()
    except:
#         pdb.set_trace()
        d3=None
    
    sorting_data = [0,0,'-',0,0,'-'] 
       
    if d3:
        if not d3.FC_transit_qty:
            d3.FC_transit_qty=0
        if not d3.FC_qty:
            d3.FC_qty=0
        if not d3.NMB_qty:
            d3.NMB_qty=0
        
        if not d3.FC_transit_NOK:
            d3.FC_transit_NOK=0
        if not d3.FC_NOK:
            d3.FC_NOK=0
        if not d3.NMB_NOK:
            d3.NMB_NOK=0
        
        if d3.FC_transit_qty or d3.FC_qty or d3.NMB_qty:
            total_customer_qty = d3.FC_transit_qty + d3.FC_qty + d3.NMB_qty
            total_customer_NOK = d3.FC_transit_NOK + d3.FC_NOK + d3.NMB_NOK
            total_customer_ppm =  total_customer_NOK / total_customer_qty * 1000000
        else:
            total_customer_qty ='-'
            total_customer_NOK = '-'
            total_customer_ppm =  '-'
        if not total_customer_qty:
            total_customer_qty = '-'
        if not total_customer_NOK:
            total_customer_NOK = '-'
            

        if not d3.NMB_transit_qty:
            d3.NMB_transit_qty=0
        if not d3.supplier_qty:
            d3.supplier_qty=0
        if not d3.sub_supplier_qty:
            d3.sub_supplier_qty=0
        
        if not d3.NMB_transit_NOK:
            d3.NMB_transit_NOK=0
        if not d3.supplier_NOK:
            d3.supplier_NOK=0
        if not d3.sub_supplier_NOK:
            d3.sub_supplier_NOK=0
        
        if d3.NMB_transit_qty or d3.supplier_qty or d3.sub_supplier_qty:
            total_supplier_qty = d3.NMB_transit_qty + d3.supplier_qty + d3.sub_supplier_qty
            total_supplier_NOK = d3.NMB_transit_NOK + d3.supplier_NOK + d3.sub_supplier_NOK
            total_supplier_ppm =  total_supplier_NOK / total_supplier_qty * 1000000
        else:
            total_supplier_qty ='-'
            total_supplier_NOK = '-'
            total_supplier_ppm =  '-'
        if not total_supplier_qty:
            total_supplier_qty = '-'
        if not total_supplier_NOK:
            total_supplier_NOK = '-'
            

#         pdb.set_trace()
        sorting_data[0]=total_supplier_qty
        sorting_data[1]=total_supplier_NOK
        sorting_data[2]=total_supplier_ppm
        sorting_data[3]=total_customer_qty
        sorting_data[4]=total_customer_NOK
        sorting_data[5]=total_customer_ppm
            
        
    claim = get_object_or_404(Claim, pk=claim)
    company_id = claim.related_to_id
    vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]
    user_profile = UserProfile.objects.get(user_id=request.user)
    company_id = claim.related_to_id
    show_company = company_id
    company = Company.objects.get(pk=company_id)
    creator = UserProfile.objects.get(user_id=claim.created_by)
    
    if request.method == "POST":
        if '/SMS/claim_Data/' in request.path:     
            form = Data_Form(request.POST)
            if form.is_valid():
                claim.accepted=form.cleaned_data['accepted']
                claim.refused=form.cleaned_data['refused']
                claim.production_date_1=form.cleaned_data['production_date_1']
                claim.production_date_2=form.cleaned_data['production_date_2']
                claim.production_date_3=form.cleaned_data['production_date_3']
                claim.operator_1=form.cleaned_data['operator_1']
                claim.operator_2=form.cleaned_data['operator_2']
                claim.operator_3=form.cleaned_data['operator_3']
                claim.batch_1=form.cleaned_data['batch_1']
                claim.batch_2=form.cleaned_data['batch_2']
                claim.batch_3=form.cleaned_data['batch_3']
                claim.cavity_1=form.cleaned_data['cavity_1']
                claim.cavity_2=form.cleaned_data['cavity_2']
                claim.cavity_3=form.cleaned_data['cavity_3']
                claim.save()
                return redirect('claim_Data', claim)
            else:
                return render(request, 'SMS/claim_Data.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'claim':claim, 'creator':creator })
        
        if '/SMS/D1/' in request.path:
            form=Team_Form(request.POST, instance=team)
            if form.is_valid():
                team_form=form.save(commit=False)
                team_form.save()
                return redirect('D1', claim)
            else:
                return render(request, 'SMS/D1.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'claim':claim, 'creator':creator })

        if '/SMS/D2/' in request.path:
            form=D2_SV_Form(request.POST, instance=d2_sv)
            if form.is_valid():
                d2_form=form.save(commit=False)
                d2_form.claim_id=claim.pk
                d2_form.save()
                return redirect('D2', claim)
            else:
                return render(request, 'SMS/D2.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'claim':claim, 'creator':creator , 'd2_cv':d2_cv })

        if '/SMS/D3/' in request.path:
            if request.POST.get("due_date_D3"):
#                 pdb.set_trace()
                form_due=Claim_Form(request.POST, instance=claim)
                if form_due.is_valid():
                    edit_due_date=form_due.save(commit=False)
                    edit_due_date.save()
                    return redirect('claims', company_id)

            else:
                form=D3_Form(request.POST, instance=d3)
                if form.is_valid():
#                     pdb.set_trace()
                    if 'Submit' in request.POST:
                        claim.status_id = ClaimStatus.objects.get(status='D3 uploaded').pk
                        claim.save()
                    if 'Accept' in request.POST:
                        claim.status_id = ClaimStatus.objects.get(status='D3 accepted').pk
                        claim.save()
                    if 'Reject' in request.POST:
                        claim.status_id = ClaimStatus.objects.get(status='D3 rejected').pk
                        claim.save()
                    d3_data=form.save(commit=False)
                    d3_data.claim_id=claim.pk
                    d3_data.save()
                    return redirect('D3', claim)    


    else:    
        if '/SMS/claim_Data/' in request.path:     
            form=Data_Form(instance=claim)
            return render(request, 'SMS/claim_Data.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'claim':claim, 'creator':creator })

        if '/SMS/D1/' in request.path:
                 
            form=Team_Form(instance=team, initial={'pilot': user_profile.firstname + ' ' + user_profile.lastname, 'mail': user_profile.email})
            return render(request, 'SMS/D1.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'claim':claim, 'creator':creator })

        if '/SMS/D2/' in request.path:
            form=D2_SV_Form(instance=d2_sv)
            return render(request, 'SMS/D2.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'claim':claim, 'creator':creator, 'd2_cv':d2_cv })

        if '/SMS/D3/' in request.path:
            form=D3_Form(instance=d3)
            form_due=Claim_Form(instance=claim)
            return render(request, 'SMS/D3.html', {'vendors':vendors, 'user_profile':user_profile, 'show_company':show_company, 'company':company, 'form': form, 'form_due': form_due, 'claim':claim, 'creator':creator, 'd2_cv':d2_cv, 'sorting_data':sorting_data })

 
           
# 
# @login_required
# def certs(request, company_id):
#     actual_user_id = request.user
#     user_profile = UserProfile.objects.get(user_id=actual_user_id)
#     vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]
# #     company_id=1
# #     claims = Claim.objects.filter(related_to = company_id)
#     return render(request, 'SMS/claims.html', {'vendors':vendors, 'user_profile':user_profile})        
# 
# @login_required
# def ppaps(request, company_id):
#     actual_user_id = request.user
#     user_profile = UserProfile.objects.get(user_id=actual_user_id)
#     vendors=[(vendor.pk, vendor.name) for vendor in Company.objects.all()]
# #     company_id=1
# #     claims = Claim.objects.filter(related_to = company_id)
#     return render(request, 'SMS/claims.html', {'vendors':vendors, 'user_profile':user_profile})        
    